import{_ as o,M as n,p as l,q as s,R as e,t,N as a,a3 as i}from"./framework-dd056dd6.js";const c={},d=i('<h1 id="javascript-data-types" tabindex="-1"><a class="header-anchor" href="#javascript-data-types" aria-hidden="true">#</a> JavaScript Data Types</h1><p>Variables can hold different values and these values can be broken down into different types known as Data Types. In JavaScript, data types are divided into two categories Primitive Data Types and Objects.</p><h2 id="primitives" tabindex="-1"><a class="header-anchor" href="#primitives" aria-hidden="true">#</a> Primitives</h2><p>Primitives define immutable values or a value that cannot be changed. This means the specific value cannot change, not the variable holding that value. For example, the value of the <code>Number</code> 2 is always 2, you cannot change that. Likewise, the <code>String</code> of characters <code>ABC</code> cannot be changed.</p><p>In JavaScript, there are six primitive data types, which are as follows:</p>',5),p={href:"https://developer.mozilla.org/en-US/docs/Glossary/Boolean",target:"_blank",rel:"noopener noreferrer"},h={href:"https://developer.mozilla.org/en-US/docs/Glossary/Number",target:"_blank",rel:"noopener noreferrer"},_={href:"https://developer.mozilla.org/en-US/docs/Glossary/String",target:"_blank",rel:"noopener noreferrer"},u={href:"https://developer.mozilla.org/en-US/docs/Glossary/Symbol",target:"_blank",rel:"noopener noreferrer"},b={href:"https://developer.mozilla.org/en-US/docs/Glossary/Null",target:"_blank",rel:"noopener noreferrer"},f={href:"https://developer.mozilla.org/en-US/docs/Glossary/Undefined",target:"_blank",rel:"noopener noreferrer"},v=e("p",null,[t("From this list, the three most common data types are "),e("code",null,"Boolean"),t(", "),e("code",null,"Number"),t(", and "),e("code",null,"String"),t(".")],-1),m=e("h2",{id:"objects",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#objects","aria-hidden":"true"},"#"),t(" Objects")],-1),g=e("p",null,"In JavaScript, an object is considered to be a collection of properties. These properties are stored in key-value pairs. The key is used to identified properties, and values can be a value of any type.",-1),y=e("p",null,"Any data structure that is not a primitive data type is an object including:",-1),S={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",target:"_blank",rel:"noopener noreferrer"},k={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",target:"_blank",rel:"noopener noreferrer"},j={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",target:"_blank",rel:"noopener noreferrer"},U={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",target:"_blank",rel:"noopener noreferrer"},x={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",target:"_blank",rel:"noopener noreferrer"},z=e("p",null,"We will learn more about these data types later in the course.",-1);function G(N,J){const r=n("ExternalLinkIcon");return l(),s("div",null,[d,e("ul",null,[e("li",null,[e("a",p,[t("Boolean"),a(r)])]),e("li",null,[e("a",h,[t("Number"),a(r)])]),e("li",null,[e("a",_,[t("String"),a(r)])]),e("li",null,[e("a",u,[t("Symbol"),a(r)])]),e("li",null,[e("a",b,[t("Null"),a(r)])]),e("li",null,[e("a",f,[t("Undefined"),a(r)])])]),v,m,g,y,e("ul",null,[e("li",null,[e("a",S,[t("Arrays"),a(r)])]),e("li",null,[e("a",k,[t("Objects"),a(r)])]),e("li",null,[e("a",j,[t("Functions"),a(r)])]),e("li",null,[e("a",U,[t("Maps"),a(r)])]),e("li",null,[e("a",x,[t("Sets"),a(r)])])]),z])}const w=o(c,[["render",G],["__file","data-types.html.vue"]]);export{w as default};
